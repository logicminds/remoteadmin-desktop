<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="com.lmc.ralib.components.*"
					   preinitialize="initdata()" width="1024" height="768"
					   addedToStage="onComplete()" contentBackgroundColor="#FFFFFF"
					   splashScreenImage="@Embed(source='assets/images/splashimage.png')"
					   splashScreenScaleMode="zoom" applicationDPI="160"
					   applicationComplete="onApplicationComplete()" xmlns:remoteadmin="com.lmc.remoteadmin.*">
	<fx:Style source="styles/buttonstyles.css" /> 
	<fx:Style source="styles/chartstyles.css" /> 
	<fx:Style source="styles/globalsettings.css" />
	<fx:Style source="styles/forms.css" />
	
	<fx:Declarations>
		<remoteadmin:RemoteAdminContext contextView="{this}" />
	
		<s:MultiDPIBitmapSource id="systemsicon" source160dpi="@Embed('assets/icons/systems32.png')"
								source240dpi="@Embed('assets/icons/systems48.png')"				
								source320dpi="@Embed('assets/icons/systems64.png')"/>
		<s:MultiDPIBitmapSource id="reportsicon" source160dpi="@Embed('assets/icons/reports32.png')"
								source240dpi="@Embed('assets/icons/reports48.png')"				
								source320dpi="@Embed('assets/icons/reports64.png')"/>
		<s:MultiDPIBitmapSource id="facticon" source160dpi="@Embed('assets/icons/facticon32.png')"
								source240dpi="@Embed('assets/icons/facticon48.png')"				
								source320dpi="@Embed('assets/icons/facticon64.png')"/>		
		
		
		<s:MultiDPIBitmapSource id="homeicon" source160dpi="@Embed('assets/icons/home32.png')"
								source240dpi="@Embed('assets/icons/home48.png')"				
								source320dpi="@Embed('assets/icons/home64.png')"/>
		<s:MultiDPIBitmapSource id="moreicon" source160dpi="@Embed('assets/icons/more32.png')"
								source240dpi="@Embed('assets/icons/more48.png')"				
								source320dpi="@Embed('assets/icons/more64.png')"/>
		
		
	</fx:Declarations>	
	<!-- <s:SplitViewNavigator id="svn" width="100%" height="100%">
		<s:ViewNavigator id="leftNav" width="30%" height="100%" firstView="com.lmc.ralib.view.LeftNavView"/>
		<s:ViewNavigator id="rightNav" width="100%" height="100%" firstView="com.lmc.ralib.view.HomeView"/>
	</s:SplitViewNavigator> -->
	
	<s:TabbedViewNavigator id="tabnavigators" width="100%" height="100%">
		<s:ViewNavigator label="Home" icon="{homeicon}" width="100%" height="100%" id="homenav" />
		<s:ViewNavigator label="Hosts" icon="{systemsicon}" width="100%" height="100%" firstView="com.lmc.ralib.view.HostsView" id="hostsnav"/>
		<s:ViewNavigator label="Reports" icon="{reportsicon}" width="100%" height="100%" firstView="com.lmc.ralib.view.ReportsView" id="reportsnav"/>
		<s:ViewNavigator label="Facts" icon="{facticon}" width="100%" height="100%" firstView="com.lmc.ralib.view.FactsView" id="factsnav"/>
		<s:ViewNavigator label="More" icon="{moreicon}" width="100%" height="100%" firstView="com.lmc.ralib.view.MoreView" id="morenav" /> 
	</s:TabbedViewNavigator>
	<!--
	
	-->
	<!-- <s:ViewNavigator label="Groups" icon="{groupsicon}" width="100%" height="100%" firstView="com.lmc.remoteadmin.view.HostGroupsView"/> -->
	<!-- <s:ViewNavigator label="Profiles" icon="{profilesicon}" width="100%" height="100%" firstView="com.lmc.remoteadmin.view.ProfilesView"/> -->
	
	
	
	<fx:Script>
		<![CDATA[
			import air.update.ApplicationUpdaterUI;
			import air.update.events.DownloadErrorEvent;
			import air.update.events.StatusUpdateErrorEvent;
			import air.update.events.UpdateEvent;
			
			import com.google.analytics.AnalyticsTracker;
			import com.google.analytics.GATracker;
			import com.google.analytics.core.EventTracker;
			import com.google.analytics.core.TrackerMode;
			
			
			import flash.events.ErrorEvent;
			import flash.net.SharedObject;
			import flash.system.Capabilities;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.BitmapAsset;
			
			import spark.events.ViewNavigatorEvent;
			private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
			
			private var settings:SharedObject = SharedObject.getLocal("settings");
			private var tracker:AnalyticsTracker;
			private var evtTracker:EventTracker;
			
			import mx.core.FlexGlobals;
			
			//TODO Change DPI aware font size for list
			//TODO Change DPI aware size for button 
			// trick Flash Builder by adding a dependency
			IOSThemeClasses;
			MobileExamples;
			
			private function onComplete():void{
				
			}
			private function initdata():void{
				
			}
			private function checkForUpdate():void {
				appUpdater.isCheckForUpdateVisible = false; // We won't ask permission to check for an update
				appUpdater.updateURL = "http://www.remoteadmin.co/desktop/remoteadmindesktop_update-des.xml";
				//appUpdater.isCheckForUpdateVisible = true;
				//appUpdater.isDownloadUpdateVisible = true;
				///appUpdater.isDownloadProgressVisible = true;
				//appUpdater.isInstallUpdateVisible = true;
				appUpdater.addEventListener(UpdateEvent.INITIALIZED, onUpdate); // Once initialized, run onUpdate
				appUpdater.addEventListener(ErrorEvent.ERROR, onUpdateError); // If something goes wrong, run onError
				//appUpdater.configurationFile = new File("app:/config/update-config.xml");
				appUpdater.addEventListener(StatusUpdateErrorEvent.UPDATE_ERROR, onStatusUpdateError);
				appUpdater.addEventListener(DownloadErrorEvent.DOWNLOAD_ERROR, onDownloadError);
				appUpdater.initialize(); // Initialize the update framework
				
				
				
			}
			private function onStatusUpdateError(evt:StatusUpdateErrorEvent):void {
				Alert.show(evt.toString());
			}
			private function onDownloadError(evt:DownloadErrorEvent):void {
				Alert.show(evt.toString());
			}
			private function onUpdateError(event:ErrorEvent):void {
				Alert.show(event.toString());
			}
			
			private function onUpdate(event:UpdateEvent):void {
				appUpdater.checkNow(); // Go check for an update now
			}
			protected function onApplicationComplete():void
			{	
				// Check for update
				checkForUpdate();
				
				// Create a memcache like structure and store the object for retreival later
				//findNetwork();
				
				// Handle orientation change events if auto-orient is true
			
				
				// Invoke listener - request to be notified when the AIR app is invoked (started), this could occur from the command line, UI or
				// from opening an associated file
				
				//NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke);
				
				// Get notified whan a global error occurs
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onError);
				
				
				
				
			}
			// Handle Global Errors
			protected function onError(e:UncaughtErrorEvent):void
			{
				e.preventDefault();
				trace("An error has occurred and been caught by the global error handler: " + e.error.toString(), "My Global Error Handler");
			}
		]]>
	</fx:Script>

</s:WindowedApplication>
